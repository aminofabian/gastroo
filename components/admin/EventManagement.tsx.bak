"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { EventType } from "@prisma/client";
import { format } from "date-fns";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { FaEdit, FaTrash } from "react-icons/fa";
import { FaUsers, FaImages, FaNewspaper, FaHandshake, FaDonate, FaChartBar, FaCalendarAlt } from "react-icons/fa";
import AdminLayout from "@/components/admin/AdminLayout";

interface Event {
  id: string;
  title: string;
  description: string;
  type: EventType;
  startDate: string;
  endDate: string;
  venue: string;
  objectives: string[];
  cpdPoints: number;
  speakers: string[];
  moderators: string[];
  capacity?: number | null;
  registrationDeadline?: string | null;
  materials?: Record<string, any> | null;
  memberPrice?: number | null;
  nonMemberPrice?: number | null;
  attendees: Array<{
    id: string;
    firstName: string;
    lastName: string;
    email: string;
  }>;
}

type FormValues = {
  title: string;
  description: string;
  type: EventType;
  startDate: string;
  endDate: string;
  venue: string;
  objectives: string[];
  cpdPoints: number;
  speakers: string[];
  moderators: string[];
  capacity?: number | null;
  registrationDeadline?: string | null;
  materials?: File[];
  memberPrice?: number | null;
  nonMemberPrice?: number | null;
};

const ACCEPTED_FILE_TYPES = {
  'application/pdf': '.pdf',
  'application/msword': '.doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
  'application/vnd.ms-powerpoint': '.ppt',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
  'application/vnd.ms-excel': '.xls',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
};

const formatBytes = (bytes: number, decimals = 2) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
};

const formSchema = z.object({
  title: z.string().min(1, "Title is required"),
  description: z.string().min(1, "Description is required"),
  type: z.nativeEnum(EventType),
  startDate: z.string().min(1, "Start date is required"),
  endDate: z.string().min(1, "End date is required"),
  venue: z.string().min(1, "Venue is required"),
  objectives: z.array(z.string()).min(1, "At least one objective is required"),
  cpdPoints: z.number().min(0, "CPD points must be non-negative"),
  speakers: z.array(z.string()),
  moderators: z.array(z.string()),
  capacity: z.number().nullable().optional(),
  registrationDeadline: z.string().nullable().optional(),
  materials: z.array(z.custom<File>()).optional(),
  memberPrice: z.number().nullable().optional(),
  nonMemberPrice: z.number().nullable().optional(),
});

export default function EventManagement() {
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [open, setOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [eventToDelete, setEventToDelete] = useState<string | null>(null);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      description: "",
      type: "CONFERENCE" as EventType,
      startDate: "",
      endDate: "",
      venue: "",
      objectives: [],
      cpdPoints: 0,
      speakers: [],
      moderators: [],
      capacity: null,
      registrationDeadline: null,
      materials: [],
      memberPrice: null,
      nonMemberPrice: null,
    },
  });

  useEffect(() => {
    fetchEvents();
  }, []);

  useEffect(() => {
    if (selectedEvent) {
      form.reset({
        title: selectedEvent.title,
        description: selectedEvent.description,
        type: selectedEvent.type,
        startDate: format(new Date(selectedEvent.startDate), "yyyy-MM-dd'T'HH:mm"),
        endDate: format(new Date(selectedEvent.endDate), "yyyy-MM-dd'T'HH:mm"),
        venue: selectedEvent.venue,
        objectives: selectedEvent.objectives,
        cpdPoints: selectedEvent.cpdPoints,
        speakers: selectedEvent.speakers,
        moderators: selectedEvent.moderators,
        capacity: selectedEvent.capacity,
        registrationDeadline: selectedEvent.registrationDeadline,
        materials: selectedEvent.materials as File[],
        memberPrice: selectedEvent.memberPrice || null,
        nonMemberPrice: selectedEvent.nonMemberPrice || null,
      });
    } else {
      form.reset({
        title: "",
        description: "",
        type: "CONFERENCE" as EventType,
        startDate: "",
        endDate: "",
        venue: "",
        objectives: [],
        cpdPoints: 0,
        speakers: [],
        moderators: [],
        capacity: null,
        registrationDeadline: null,
        materials: [],
        memberPrice: null,
        nonMemberPrice: null,
      });
    }
  }, [selectedEvent, form]);

  const fetchEvents = async () => {
    try {
      const response = await fetch("/api/admin/events");
      const data = await response.json();
      setEvents(data);
    } catch (error) {
      console.error("Error fetching events:", error);
      toast({
        title: "Error",
        description: "Failed to fetch events",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsSubmitting(true);
    try {
      const url = selectedEvent
        ? `/api/admin/events/${selectedEvent.id}`
        : "/api/admin/events";
      const method = selectedEvent ? "PATCH" : "POST";

      toast({
        title: "Processing",
        description: "Uploading files and creating event...",
      });

      const formData = new FormData();
      formData.append("title", values.title);
      formData.append("description", values.description);
      formData.append("type", values.type);
      formData.append("startDate", values.startDate);
      formData.append("endDate", values.endDate);
      formData.append("venue", values.venue);
      formData.append("objectives", JSON.stringify(values.objectives));
      formData.append("cpdPoints", values.cpdPoints.toString());
      formData.append("speakers", JSON.stringify(values.speakers));
      formData.append("moderators", JSON.stringify(values.moderators));
      if (values.capacity) formData.append("capacity", values.capacity.toString());
      if (values.registrationDeadline) formData.append("registrationDeadline", values.registrationDeadline);
      
      // Handle price fields - explicitly handle null and undefined values
      formData.append("memberPrice", values.memberPrice === null || values.memberPrice === undefined ? 'null' : values.memberPrice.toString());
      formData.append("nonMemberPrice", values.nonMemberPrice === null || values.nonMemberPrice === undefined ? 'null' : values.nonMemberPrice.toString());

      // Handle file uploads
      const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
      if (fileInput && fileInput.files) {
        for (const file of Array.from(fileInput.files)) {
          formData.append("materials", file);
        }
      }

      const response = await fetch(url, {
        method,
        body: formData,
      });

      if (!response.ok) throw new Error(`Failed to ${selectedEvent ? 'update' : 'create'} event`);

      toast({
        title: "Success",
        description: `Event ${selectedEvent ? 'updated' : 'created'} successfully`,
      });
      setOpen(false);
      setSelectedEvent(null);
      form.reset();
      fetchEvents();
    } catch (error) {
      console.error(`Error ${selectedEvent ? 'updating' : 'creating'} event:`, error);
      toast({
        title: "Error",
        description: `Failed to ${selectedEvent ? 'update' : 'create'} event`,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEdit = (event: Event) => {
    setSelectedEvent(event);
    setOpen(true);
  };

  const handleDelete = async (id: string) => {
    setEventToDelete(id);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!eventToDelete) return;

    try {
      const response = await fetch(`/api/admin/events/${eventToDelete}`, {
        method: "DELETE",
      });

      if (!response.ok) throw new Error("Failed to delete event");

      toast({
        title: "Success",
        description: "Event deleted successfully",
      });

      fetchEvents();
    } catch (error) {
      console.error("Error deleting event:", error);
      toast({
        title: "Error",
        description: "Failed to delete event",
        variant: "destructive",
      });
    } finally {
      setDeleteDialogOpen(false);
      setEventToDelete(null);
    }
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div className="flex items-center justify-between bg-white p-6 rounded-xl shadow-md border border-[#003366]/20">
          <div>
            <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-[#003366] to-[#004488] bg-clip-text text-transparent">Event Management</h1>
            <p className="text-gray-500 mt-1">Create, edit and manage events for your organization</p>
          </div>
          <Dialog open={open} onOpenChange={(isOpen) => {
            setOpen(isOpen);
            if (!isOpen) setSelectedEvent(null);
          }}>
            <DialogTrigger asChild>
              <Button size="lg" className="gap-2 bg-gradient-to-r from-[#003366] to-[#004488] hover:from-[#b02a57] hover:to-[#003a75] transition-all shadow-md">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M12 5v14M5 12h14" />
                </svg>
                Add New Event
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto z-[100] bg-gradient-to-b from-white to-[#003366]/5 border-2 border-[#003366]/20 shadow-2xl rounded-xl" onClick={(e) => e.stopPropagation()}>
              <DialogHeader className="space-y-3 mb-6 sticky top-0 bg-gradient-to-r from-[#003366] to-[#004488] text-white p-6 rounded-t-lg z-[101]">
                <DialogTitle className="text-2xl font-bold">
                  {selectedEvent ? 'Edit Event' : 'Create New Event'}
                </DialogTitle>
                <p className="text-white/80">
                  Fill in the details below to {selectedEvent ? 'update' : 'create'} an event.
                </p>
              </DialogHeader>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 px-8 pb-8">
                  <div className="grid grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="title"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-[#003366]">Title</FormLabel>
                          <FormControl>
                            <Input className="h-10 border-[#003366]/20 focus:border-[#003366] focus:ring-[#003366] shadow-sm" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="type"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-[#003366]">Type</FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger className="h-10 border-[#003366]/20 focus:border-[#003366] focus:ring-[#003366] shadow-sm">
                                <SelectValue placeholder="Select event type" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {Object.values(EventType).map((type) => (
                                <SelectItem key={type} value={type}>
                                  {type}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-semibold text-blue-800">Description</FormLabel>
                        <FormControl>
                          <Textarea className="min-h-[80px] resize-none border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="grid grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="startDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Start Date</FormLabel>
                          <FormControl>
                            <Input type="datetime-local" className="h-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="endDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">End Date</FormLabel>
                          <FormControl>
                            <Input type="datetime-local" className="h-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="venue"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Venue</FormLabel>
                          <FormControl>
                            <Input className="h-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="cpdPoints"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">CPD Points</FormLabel>
                          <FormControl>
                            <Input 
                              type="number"
                              className="h-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                              {...field} 
                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                              value={field.value}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="memberPrice"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Member Price (KES)</FormLabel>
                          <FormControl>
                            <Input 
                              type="number"
                              className="h-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                              placeholder="Enter amount"
                              {...field} 
                              onChange={(e) => {
                                const value = e.target.value === '' ? null : parseFloat(e.target.value);
                                field.onChange(value);
                              }}
                              value={field.value === null ? '' : field.value}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="nonMemberPrice"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Non-Member Price (KES)</FormLabel>
                          <FormControl>
                            <Input 
                              type="number"
                              className="h-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                              placeholder="Enter amount"
                              {...field} 
                              onChange={(e) => {
                                const value = e.target.value === '' ? null : parseFloat(e.target.value);
                                field.onChange(value);
                              }}
                              value={field.value === null ? '' : field.value}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="objectives"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Objectives</FormLabel>
                          <FormControl>
                            <Textarea 
                              className="min-h-[80px] resize-none border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                              placeholder="Enter objectives (one per line)"
                              value={field.value.join('\n')}
                              onChange={(e) => {
                                const value = e.target.value.split('\n').filter(Boolean);
                                field.onChange(value);
                              }}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="speakers"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Speakers</FormLabel>
                          <FormControl>
                            <Textarea 
                              className="min-h-[80px] resize-none border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                              placeholder="Enter speakers (one per line)"
                              value={field.value.join('\n')}
                              onChange={(e) => {
                                const value = e.target.value.split('\n').filter(Boolean);
                                field.onChange(value);
                              }}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="moderators"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Moderators</FormLabel>
                          <FormControl>
                            <Textarea 
                              className="min-h-[80px] resize-none border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                              placeholder="Enter moderators (one per line)"
                              value={field.value.join('\n')}
                              onChange={(e) => {
                                const value = e.target.value.split('\n').filter(Boolean);
                                field.onChange(value);
                              }}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="materials"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-semibold text-blue-800">Documents</FormLabel>
                          <FormControl>
                            <div className="space-y-4">
                              <div className="flex items-center gap-4">
                                <Input
                                  type="file"
                                  className="cursor-pointer file:cursor-pointer file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 border-blue-200 focus:border-blue-500 focus:ring-blue-500 shadow-sm"
                                  accept={Object.values(ACCEPTED_FILE_TYPES).join(',')}
                                  multiple
                                  onChange={(e) => {
                                    const files = Array.from(e.target.files || []);
                                    const validFiles = files.filter(file => {
                                      const isValidType = Object.keys(ACCEPTED_FILE_TYPES).includes(file.type);
                                      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB limit
                                      return isValidType && isValidSize;
                                    });

                                    if (validFiles.length !== files.length) {
                                      toast({
                                        title: "Invalid files",
                                        description: "Some files were skipped. Only documents up to 10MB are allowed.",
                                        variant: "destructive",
                                      });
                                    }

                                    field.onChange(validFiles);
                                  }}
                                />
                              </div>
                              {field.value && field.value.length > 0 && (
                                <div className="space-y-2">
                                  {field.value.map((file, index) => (
                                    <div
                                      key={index}
                                      className="flex items-center justify-between rounded-md border border-blue-200 bg-blue-50 px-3 py-2 shadow-sm"
                                    >
                                      <div className="flex items-center gap-2">
                                        <svg
                                          xmlns="http://www.w3.org/2000/svg"
                                          className="h-5 w-5 text-blue-600"
                                          viewBox="0 0 24 24"
                                          fill="none"
                                          stroke="currentColor"
                                          strokeWidth="2"
                                        >
                                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                                          <polyline points="14 2 14 8 20 8" />
                                        </svg>
                                        <div className="text-sm">
                                          <p className="font-medium text-blue-800">{file.name}</p>
                                          <p className="text-blue-600">{formatBytes(file.size)}</p>
                                        </div>
                                      </div>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="h-8 w-8 p-0 text-red-500 hover:bg-red-50 hover:text-red-600"
                                        onClick={() => {
                                          const newFiles = Array.from(field.value || []).filter(
                                            (_, i) => i !== index
                                          );
                                          field.onChange(newFiles);
                                        }}
                                      >
                                        <svg
                                          xmlns="http://www.w3.org/2000/svg"
                                          className="h-4 w-4"
                                          viewBox="0 0 24 24"
                                          fill="none"
                                          stroke="currentColor"
                                          strokeWidth="2"
                                        >
                                          <path d="M18 6L6 18M6 6l12 12" />
                                        </svg>
                                      </Button>
                                    </div>
                                  ))}
                                </div>
                              )}
                              <p className="text-xs text-blue-600">
                                Accepted file types: PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX (Max 10MB per file)
                              </p>
                            </div>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="flex justify-end space-x-4 pt-6 border-t border-blue-100">
                    <Button 
                      type="button" 
                      variant="outline" 
                      onClick={() => setOpen(false)}
                      className="border-blue-300 text-blue-700 hover:bg-blue-50"
                    >
                      Cancel
                    </Button>
                    <Button 
                      type="submit" 
                      disabled={isSubmitting}
                      className="bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 transition-all shadow-md"
                    >
                      {isSubmitting ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          {selectedEvent ? 'Updating...' : 'Creating...'}
                        </>
                      ) : (
                        <>{selectedEvent ? 'Update Event' : 'Create Event'}</>
                      )}
                    </Button>
                  </div>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </div>

        <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
          <DialogContent className="bg-gradient-to-b from-white to-red-50 border-2 border-red-200 shadow-2xl rounded-xl">
            <DialogHeader className="space-y-3 mb-6 bg-gradient-to-r from-red-600 to-red-700 text-white p-6 rounded-t-lg">
              <DialogTitle className="text-2xl font-bold">Delete Event</DialogTitle>
              <p className="text-red-100">This action cannot be undone.</p>
            </DialogHeader>
            <div className="space-y-6 px-6 pb-6">
              <p className="text-gray-700">Are you sure you want to delete this event? All associated data will be permanently removed.</p>
              <div className="flex justify-end gap-3">
                <Button
                  variant="outline"
                  className="border-red-300 text-red-700 hover:bg-red-50"
                  onClick={() => {
                    setDeleteDialogOpen(false);
                    setEventToDelete(null);
                  }}
                >
                  Cancel
                </Button>
                <Button
                  variant="destructive"
                  className="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 transition-all shadow-md"
                  onClick={confirmDelete}
                >
                  Delete Event
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        <div className="rounded-lg border border-blue-200 bg-white shadow-lg overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow className="bg-gradient-to-r from-blue-600 to-indigo-700">
                <TableHead className="font-semibold text-white">Title</TableHead>
                <TableHead className="font-semibold text-white">Type</TableHead>
                <TableHead className="font-semibold text-white">Start Date</TableHead>
                <TableHead className="font-semibold text-white">End Date</TableHead>
                <TableHead className="font-semibold text-white">Venue</TableHead>
                <TableHead className="font-semibold text-white">CPD Points</TableHead>
                <TableHead className="font-semibold text-white">Member Price</TableHead>
                <TableHead className="font-semibold text-white">Non-Member Price</TableHead>
                <TableHead className="font-semibold text-white">Speakers</TableHead>
                <TableHead className="font-semibold text-white">Moderators</TableHead>
                <TableHead className="font-semibold text-white">Capacity</TableHead>
                <TableHead className="font-semibold text-white">Attendees</TableHead>
                <TableHead className="font-semibold text-white text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {events.map((event) => (
                <TableRow key={event.id} className="hover:bg-blue-50/50 border-b border-blue-100">
                  <TableCell className="font-medium text-blue-800">{event.title}</TableCell>
                  <TableCell>
                    <span className="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/20 shadow-sm">
                      {event.type}
                    </span>
                  </TableCell>
                  <TableCell className="text-gray-700">
                    {format(new Date(event.startDate), "PPp")}
                  </TableCell>
                  <TableCell className="text-gray-700">
                    {format(new Date(event.endDate), "PPp")}
                  </TableCell>
                  <TableCell className="text-gray-700">{event.venue}</TableCell>
                  <TableCell>
                    <span className="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20 shadow-sm">
                      {event.cpdPoints} points
                    </span>
                  </TableCell>
                  <TableCell>
                    <span className="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/20 shadow-sm">
                      {event.memberPrice !== null ? `KES ${event.memberPrice?.toLocaleString()}` : 'Free'}
                    </span>
                  </TableCell>
                  <TableCell>
                    <span className="inline-flex items-center rounded-md bg-indigo-50 px-2 py-1 text-xs font-medium text-indigo-700 ring-1 ring-inset ring-indigo-700/20 shadow-sm">
                      {event.nonMemberPrice !== null ? `KES ${event.nonMemberPrice?.toLocaleString()}` : 'N/A'}
                    </span>
                  </TableCell>
                  <TableCell className="max-w-[200px] truncate text-gray-700" title={event.speakers.join(", ")}>
                    {event.speakers.join(", ")}
                  </TableCell>
                  <TableCell className="max-w-[200px] truncate text-gray-700" title={event.moderators.join(", ")}>
                    {event.moderators.join(", ")}
                  </TableCell>
                  <TableCell>
                    {event.capacity ? (
                      <span className="inline-flex items-center rounded-md bg-amber-50 px-2 py-1 text-xs font-medium text-amber-700 ring-1 ring-inset ring-amber-600/20 shadow-sm">
                        {event.capacity} seats
                      </span>
                    ) : (
                      <span className="text-gray-500">Unlimited</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <span className="inline-flex items-center rounded-md bg-purple-50 px-2 py-1 text-xs font-medium text-purple-700 ring-1 ring-inset ring-purple-700/20 shadow-sm">
                      {event.attendees?.length || 0} registered
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center justify-end gap-2">
                      <Button
                        onClick={() => handleEdit(event)}
                        size="sm"
                        variant="outline"
                        className="h-8 w-8 p-0 border-blue-300 text-blue-700 hover:bg-blue-50 hover:text-blue-800 transition-colors"
                      >
                        <FaEdit className="h-4 w-4" />
                      </Button>
                      <Button
                        onClick={() => handleDelete(event.id)}
                        size="sm"
                        variant="destructive"
                        className="h-8 w-8 p-0 bg-red-600 hover:bg-red-700 transition-colors"
                      >
                        <FaTrash className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    </AdminLayout>
  );
} 